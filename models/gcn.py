# ğŸ“Œ Gerekli kÃ¼tÃ¼phaneleri iÃ§e aktarÄ±yoruz.
import torch  # PyTorch, derin Ã¶ÄŸrenme iÅŸlemleri iÃ§in kullanÄ±lÄ±r.
import torch.nn.functional as F  # Aktivasyon fonksiyonlarÄ± ve kayÄ±p hesaplamalarÄ± iÃ§in.
from torch_geometric.nn import GCNConv  # PyTorch Geometric iÃ§indeki Graph Convolutional Network katmanlarÄ±.

# ğŸ“Œ Graph Convolutional Network (GCN) modelini tanÄ±mlÄ±yoruz.
class GCN(torch.nn.Module):
    """
    Graph Convolutional Network (GCN) modeli.
    Bu model, dÃ¼ÄŸÃ¼mler arasÄ± iliÅŸkileri kullanarak dÃ¼ÄŸÃ¼m Ã¶zelliklerini iÅŸler ve sÄ±nÄ±flandÄ±rma yapar.
    """

    def __init__(self, in_channels, hidden_channels, out_channels):
        """
        GCN modelinin katmanlarÄ±nÄ± ve yapÄ±sÄ±nÄ± belirler.

        Parametreler:
        - in_channels (int): GiriÅŸ katmanÄ±ndaki Ã¶zellik sayÄ±sÄ± (Ã¶rneÄŸin, dÃ¼ÄŸÃ¼m baÅŸÄ±na kelime vektÃ¶rÃ¼ boyutu).
        - hidden_channels (int): Ara katmandaki nÃ¶ron sayÄ±sÄ± (gizli katman boyutu).
        - out_channels (int): Ã‡Ä±kÄ±ÅŸ katmanÄ±ndaki sÄ±nÄ±f sayÄ±sÄ± (Cora veri setinde 7 sÄ±nÄ±f var).
        """
        super(GCN, self).__init__()  # Torch modelinin temel sÄ±nÄ±fÄ±nÄ± baÅŸlat.

        # ğŸ“Œ Ä°lk Graph Convolutional Layer (GCN KatmanÄ±)
        self.conv1 = GCNConv(in_channels, hidden_channels)

        # ğŸ“Œ Ä°kinci Graph Convolutional Layer (GCN KatmanÄ±)
        self.conv2 = GCNConv(hidden_channels, out_channels)

    def forward(self, x, edge_index):
        """
        Modelin ileri besleme (forward pass) iÅŸlemini tanÄ±mlar.

        Parametreler:
        - x (Tensor): DÃ¼ÄŸÃ¼mler iÃ§in giriÅŸ Ã¶zellikleri (node feature matrix).
        - edge_index (Tensor): GrafÄ±n dÃ¼ÄŸÃ¼mler arasÄ±ndaki baÄŸlantÄ±larÄ± gÃ¶steren kenar bilgileri (edge list).

        Ã‡Ä±ktÄ±:
        - F.log_softmax(x, dim=1): Modelin tahmin ettiÄŸi olasÄ±lÄ±k daÄŸÄ±lÄ±mÄ± (her dÃ¼ÄŸÃ¼m iÃ§in bir sÄ±nÄ±f skoru).
        """
        # ğŸ“Œ Ä°lk GCN katmanÄ±: Ã–zellikleri iÅŸleyip aktivasyon fonksiyonunu uygula.
        x = self.conv1(x, edge_index)  # Ä°lk GCN katmanÄ±ndan geÃ§ir.
        x = F.relu(x)  # ReLU aktivasyon fonksiyonunu uygula.

        # ğŸ“Œ Ä°kinci GCN katmanÄ±: SonuÃ§larÄ± hesapla.
        x = self.conv2(x, edge_index)

        # ğŸ“Œ Softmax yerine Log-Softmax kullanarak olasÄ±lÄ±klarÄ± normalize et.
        # CrossEntropyLoss doÄŸrudan log-softmax uygulanmÄ±ÅŸ giriÅŸleri beklediÄŸi iÃ§in bunu kullanÄ±yoruz.
        return F.log_softmax(x, dim=1)
