# ğŸ“Œ Gerekli kÃ¼tÃ¼phaneleri iÃ§e aktarÄ±yoruz.
import torch  # PyTorch, derin Ã¶ÄŸrenme iÅŸlemleri iÃ§in
from torch_geometric.datasets import Planetoid  # Cora veri setini yÃ¼klemek iÃ§in
from sklearn.metrics import accuracy_score, f1_score  # Modelin performansÄ±nÄ± Ã¶lÃ§mek iÃ§in
from models.gcn import GCN  # Daha Ã¶nce tanÄ±mladÄ±ÄŸÄ±mÄ±z GCN modelini iÃ§e aktarÄ±yoruz.

# ğŸ“Œ Veri setini yÃ¼kle (Cora veri seti: akademik makaleler arasÄ± baÄŸlantÄ±larÄ± iÃ§erir)
dataset = Planetoid(root='data/Cora', name='Cora')
data = dataset[0]  # Veri setindeki tek grafÄ± al (Cora tek bir graf iÃ§erir)

# ğŸ“Œ Modeli YÃ¼kle
model = GCN(in_channels=dataset.num_features, hidden_channels=16, out_channels=dataset.num_classes)

# ğŸ”¹ Modelin eÄŸitim sÄ±rasÄ±nda kaydedilen aÄŸÄ±rlÄ±klarÄ±nÄ± yÃ¼kle
model.load_state_dict(torch.load("models/gcn_model.pth", map_location=torch.device("cpu")))

# ğŸ”¹ Modeli test moduna geÃ§ir (EÄŸitim sÄ±rasÄ±nda kullanÄ±lan dropout gibi iÅŸlemler devre dÄ±ÅŸÄ± kalÄ±r)
model.eval()

# ğŸ“Œ Modeli Test Et
with torch.no_grad():  # Gradyan hesaplamalarÄ±nÄ± devre dÄ±ÅŸÄ± bÄ±rak (test sÄ±rasÄ±nda gereksiz)
    out = model(data.x, data.edge_index)  # Modeli Ã§alÄ±ÅŸtÄ±r, tahminleri al
    predictions = out.argmax(dim=1)  # En yÃ¼ksek olasÄ±lÄ±ÄŸa sahip sÄ±nÄ±fÄ± seÃ§

# ğŸ“Œ GerÃ§ek Etiketleri Al
y_true = data.y.cpu().numpy()  # GerÃ§ek etiketler
y_pred = predictions.cpu().numpy()  # Modelin tahminleri

# ğŸ“Œ DoÄŸruluk (Accuracy) ve F1 SkorlarÄ±nÄ± Hesapla
accuracy = accuracy_score(y_true, y_pred)  # Genel doÄŸruluk oranÄ±
f1 = f1_score(y_true, y_pred, average="macro")  # Makro ortalama F1 skoru hesapla

# ğŸ“Œ SonuÃ§larÄ± Konsola YazdÄ±r
print(f"\nâœ… Model Test SonuÃ§larÄ±:")
print(f"Test DoÄŸruluÄŸu: {accuracy:.4f}")  # DoÄŸruluk oranÄ±nÄ± ekrana yazdÄ±r
print(f"F1 Skoru (Makro Ortalama): {f1:.4f}")  # Makro F1 skorunu ekrana yazdÄ±r
